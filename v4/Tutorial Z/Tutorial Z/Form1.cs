using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Windows.Threading;

namespace Tutorial_Z
{
    public partial class Form1 : Form
    {
        WeAreDevs_API.ExploitAPI API = new WeAreDevs_API.ExploitAPI();

        public static bool IsTopMost = true;
        public static bool IsAutoAttach = false;

        string SettingsPath = Environment.CurrentDirectory + @"\bin\settings\";

        FileSystemWatcher ScriptsWatcher = new FileSystemWatcher
        {
            Path = "./scripts",
            EnableRaisingEvents = true
        };

        public Form1()
        {
            InitializeComponent();

            ScriptsWatcher.Created += delegate (object s, FileSystemEventArgs e)
            {
                RefreshScripts();
            };

            ScriptsWatcher.Changed += delegate (object s, FileSystemEventArgs e)
            {
                RefreshScripts();
            };

            ScriptsWatcher.Renamed += delegate (object s, RenamedEventArgs e)
            {
                RefreshScripts();
            };

            ScriptsWatcher.Deleted += delegate (object s, FileSystemEventArgs e)
            {
                RefreshScripts();
            };

            CheckSettings();
        }

        public async void CheckSettings()
        {
            while (true)
            {                
                await Task.Delay(400);
                if (IsTopMost || File.ReadAllText(SettingsPath + "topmost").Contain("true"))
                {
                    TopMost = true;
                }
                else
                {
                    TopMost = false;
                }
            }
        }

        public void RefreshScripts()
        {
            Invoke((MethodInvoker)delegate
            {
                listBox1.Items.Clear();
                foreach (FileInfo Script in new DirectoryInfo("./Scripts").GetFiles("*.*"))
                {
                    listBox1.Items.Add(Script.Name);
                }
            });            
        }

        private async void guna2Button1_Click(object sender, EventArgs e)
        {
            await Task.Delay(100); // Lets the animation load.
            Environment.Exit(0); // Exits the environment, it makes sure all the instances of the app is closed.
        }

        private async void guna2Button2_Click(object sender, EventArgs e)
        {
            await Task.Delay(100); // Lets the animation load.
            base.WindowState = FormWindowState.Minimized; // Minimizes the window.
        }

        private void guna2Button3_Click(object sender, EventArgs e)
        {
            API.SendLuaScript(fastColoredTextBox1.Text);
        }

        private void guna2Button4_Click(object sender, EventArgs e)
        {
            fastColoredTextBox1.Clear();
        }

        private void guna2Button5_Click(object sender, EventArgs e)
        {
            OpenFileDialog Dialog = new OpenFileDialog
            {
                Title = "Open",
                Filter = "Text (*.txt)|*.txt|Lua (*.lua)|*.lua|All Files (*.*)|*.*"
            };

            if (Dialog.ShowDialog() == DialogResult.OK)
            {
                fastColoredTextBox1.Text = File.ReadAllText(Dialog.FileName);
            }
        }

        private void guna2Button6_Click(object sender, EventArgs e)
        {
            SaveFileDialog Dialog = new SaveFileDialog
            {
                Title = "Save as",
                Filter = "Text (*.txt)|*.txt|Lua (*.lua)|*.lua|All Files (*.*)|*.*"
            };

            if (Dialog.ShowDialog() == DialogResult.OK)
            {
                if (!File.Exists(Dialog.FileName))
                {
                    File.Create(Dialog.FileName).Close();
                    File.WriteAllText(Dialog.FileName, fastColoredTextBox1.Text);
                }
                else
                {
                    File.WriteAllText(Dialog.FileName, fastColoredTextBox1.Text);
                }
            }
        }

        private void guna2Button7_Click(object sender, EventArgs e)
        {
            API.LaunchExploit();
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox1.SelectedIndex != -1)
            {
                fastColoredTextBox1.Text = $"-- {listBox1.SelectedItem}\n\n{File.ReadAllText("./Scripts/" + listBox1.SelectedItem)}";
            }
        }

        private void guna2Button8_Click(object sender, EventArgs e)
        {
            RefreshScripts();
        }

        private void guna2Button9_Click(object sender, EventArgs e)
        {
            new ScriptHub().Show();
        }

        private void guna2Button10_Click(object sender, EventArgs e)
        {
            new Settings().Show();
        }
    }
}
