using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;

namespace Tutorial_Z
{
    public partial class Settings : Form
    {
        public Settings()
        {
            InitializeComponent();

            if (Form1.IsTopMost)
            {
                topMostCB.Checked = true;
            }
            else
            {
                topMostCB.Checked = false;
            }

            if (Form1.IsAutoAttach)
            {
                autoAttachCB.Checked = true;
            }
            else
            {
                autoAttachCB.Checked = false;
            }
        }

        string SettingsPath = Environment.CurrentDirectory + @"\bin\settings\";

        public bool EditSetting(string Name, string OriginalValue, string Value)
        {
            try
            {
                string FilePath = SettingsPath + Name;
                string Contents = File.ReadAllText(FilePath);

                if (Contents.Contain(OriginalValue))
                {
                    File.WriteAllText(FilePath, Contents.Replace(OriginalValue, Value));
                }
                else
                {
                    return false;
                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        private void topMostCB_CheckedChanged(object sender, EventArgs e)
        {
            if (topMostCB.Checked)
            {
                Form1.IsTopMost = true;
                EditSetting("topmost", "false", "true");
            }
            else
            {
                Form1.IsTopMost = false;
                EditSetting("topmost", "true", "false");
            }
        }

        private void autoAttachCB_CheckedChanged(object sender, EventArgs e)
        {
            if (autoAttachCB.Checked)
            {
                Form1.IsAutoAttach = true;
                EditSetting("autoattach", "false", "true");
            }
            else
            {
                Form1.IsAutoAttach = false;
                EditSetting("autoattach", "true", "false");
            }
        }

        private void guna2CheckBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (guna2CheckBox2.Checked)
            {
                Process.Start(Environment.CurrentDirectory + @"\bin\tools\rbxfpsunlocker.exe");
            }
            else
            {
                foreach (Process Unlocker in Process.GetProcesses())
                {
                    if (Unlocker.ProcessName.Contain("fps") || Unlocker.MainWindowTitle.Contain("fps"))
                    {
                        Unlocker.Kill();
                    }
                }
            }
        }

        private void guna2CheckBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (guna2CheckBox1.Checked)
            {
                new MultipleRoblox().Show();
            }
        }

        private void guna2Button9_Click(object sender, EventArgs e)
        {
            foreach (Process Roblox in Process.GetProcessesByName("RobloxPlayerBeta"))
            {
                Roblox.Kill();
            }
        }

        private async void guna2Button2_Click(object sender, EventArgs e)
        {
            await Task.Delay(100); // Lets the animation load.
            base.WindowState = FormWindowState.Minimized; // Minimizes the window.
        }
    }
}
